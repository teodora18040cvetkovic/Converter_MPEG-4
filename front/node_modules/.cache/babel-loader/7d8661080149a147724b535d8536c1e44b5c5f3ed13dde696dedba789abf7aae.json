{"ast":null,"code":"var _jsxFileName = \"D:\\\\Diplomski\\\\aplikacija\\\\front\\\\src\\\\components\\\\Compress.js\",\n  _s = $RefreshSig$();\nimport \"./style.css\";\nimport FileSelectComponent from \"./FileSelectComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Compress = () => {\n  _s();\n  const [records, setRecords] = useState([]);\n  //const [showRecords, setShowRecords] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchRecords = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(\"http://localhost:5000/compression-records\");\n      setRecords(response.data);\n    } catch (error) {\n      setError(\"Error fetching records\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchRecords();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"compresComp\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title1\",\n        children: \"Convert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title2\",\n        children: \"Choose a files to convert to MPEG-4 audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileSelectComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileSelectComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileSelectComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Compress, \"Jx0RdDiyQva2zd2qj7rmBx1Kp3E=\");\n_c = Compress;\nexport default Compress;\n\n/*import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./style.css\";\r\nconst TableComponent = () => {\r\n  const [records, setRecords] = useState([]);\r\n  //const [showRecords, setShowRecords] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchRecords = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:5000/compression-records\"\r\n      );\r\n      setRecords(response.data);\r\n    } catch (error) {\r\n      setError(\"Error fetching records\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRecords();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tableComp\">\r\n      <div className=\"title3\">Compression Records</div>{\" \"}\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p>{error}</p>}\r\n      <div className=\"records\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>File Name</th>\r\n              <th>Compression Ratio (%)</th>\r\n              <th>Input File Size (MB)</th>\r\n              <th>Compressed File Size (MB)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {records.map((record, index) => (\r\n              <tr key={index}>\r\n                <td>{record.fileName}</td>\r\n                <td>{record.compressionRatio}</td>\r\n                <td>{record.inputFileSize}</td>\r\n                <td>{record.outputFileSize}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default TableComponent;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Compress\");","map":{"version":3,"names":["FileSelectComponent","jsxDEV","_jsxDEV","Compress","_s","records","setRecords","useState","loading","setLoading","error","setError","fetchRecords","response","axios","get","data","useEffect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","TableComponent","_c","$RefreshReg$"],"sources":["D:/Diplomski/aplikacija/front/src/components/Compress.js"],"sourcesContent":["import \"./style.css\";\r\nimport FileSelectComponent from \"./FileSelectComponent\";\r\n\r\nconst Compress = () => {\r\n   const [records, setRecords] = useState([]);\r\n   //const [showRecords, setShowRecords] = useState(false);\r\n   const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n\r\n   const fetchRecords = async () => {\r\n     setLoading(true);\r\n     setError(null);\r\n     try {\r\n       const response = await axios.get(\r\n         \"http://localhost:5000/compression-records\"\r\n       );\r\n       setRecords(response.data);\r\n     } catch (error) {\r\n       setError(\"Error fetching records\");\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n\r\n   useEffect(() => {\r\n     fetchRecords();\r\n   }, []);\r\n\r\n  return (\r\n    <div className=\"wrap\">\r\n      <div className=\"compresComp\">\r\n        <div className=\"title1\">Convert</div>\r\n        <div className=\"title2\">Choose a files to convert to MPEG-4 audio</div>\r\n        <FileSelectComponent></FileSelectComponent>\r\n        <FileSelectComponent></FileSelectComponent>\r\n        <FileSelectComponent></FileSelectComponent>\r\n      </div>\r\n      <TableComponent />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Compress;\r\n\r\n/*import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./style.css\";\r\nconst TableComponent = () => {\r\n  const [records, setRecords] = useState([]);\r\n  //const [showRecords, setShowRecords] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchRecords = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:5000/compression-records\"\r\n      );\r\n      setRecords(response.data);\r\n    } catch (error) {\r\n      setError(\"Error fetching records\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRecords();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tableComp\">\r\n      <div className=\"title3\">Compression Records</div>{\" \"}\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p>{error}</p>}\r\n      <div className=\"records\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>File Name</th>\r\n              <th>Compression Ratio (%)</th>\r\n              <th>Input File Size (MB)</th>\r\n              <th>Compressed File Size (MB)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {records.map((record, index) => (\r\n              <tr key={index}>\r\n                <td>{record.fileName}</td>\r\n                <td>{record.compressionRatio}</td>\r\n                <td>{record.inputFileSize}</td>\r\n                <td>{record.outputFileSize}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default TableComponent;\r\n*/"],"mappings":";;AAAA,OAAO,aAAa;AACpB,OAAOA,mBAAmB,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAC1C;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMK,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BH,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAC9B,2CACF,CAAC;MACDT,UAAU,CAACO,QAAQ,CAACG,IAAI,CAAC;IAC3B,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,QAAQ,CAAC,wBAAwB,CAAC;IACpC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDQ,SAAS,CAAC,MAAM;IACdL,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEP,oBACEV,OAAA;IAAKgB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBjB,OAAA;MAAKgB,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BjB,OAAA;QAAKgB,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrCrB,OAAA;QAAKgB,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAC;MAAyC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACvErB,OAAA,CAACF,mBAAmB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsB,CAAC,eAC3CrB,OAAA,CAACF,mBAAmB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsB,CAAC,eAC3CrB,OAAA,CAACF,mBAAmB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACNrB,OAAA,CAACsB,cAAc;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEV,CAAC;AAACnB,EAAA,CArCID,QAAQ;AAAAsB,EAAA,GAARtB,QAAQ;AAuCd,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}